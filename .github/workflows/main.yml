name: 'Build and Test'

on:
  push:
  schedule: # Keep the cache alive!
    - cron: 7 1 * * fri

env:
  GODOT: Godot_v3.3.2-stable
  GODOT_VERSION: 3.3.2
  GODOT_RELEASE: stable

  # Caches should be automatically invalidated when versions change,
  # but invalidation can be forced by incrementing these numbers.
  EMSCRIPTEN_CACHE_VERSION: 1
  EXPORT_TEMPLATE_CACHE_VERSION: 1
  GODOT_CACHE_VERSION: 1
  GODOT_CPP_CACHE_VERSION: 1
  LIBUV_CACHE_VERSION: 1

jobs:
  build:
    name: 'Build'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux, javascript, osx, windows ]
        target: [ release, debug ]
        bits: [ 64, 32 ]
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: javascript
            os: ubuntu-latest
          - platform: osx
            os: macos-latest
          - platform: windows
            os: windows-latest
        exclude:
          - platform: javascript
            bits: 64 # Currently only wasm32 is supported.
          - platform: osx
            bits: 32 # Only 64-bit supported on macOS.
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get godot-cpp submodule commit hash
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo ::set-env name=GODOT_CPP_COMMIT_HASH::$(git ls-tree HEAD addons/godot_xterm/native/thirdparty/godot-cpp -l | cut -d\  -f3)
      - name: Cache godot-cpp bindings
        uses: actions/cache@v2
        id: cache
        env:
          cache-name: cache-godot-cpp
        with:
          path: addons/godot_xterm/native/thirdparty/godot-cpp
          key: godot-cpp-${{ matrix.platform }}-${{ matrix.target }}-${{ matrix.bits }}-${{ env.GODOT_CPP_COMMIT_HASH }}-v${{ env.GODOT_CPP_CACHE_VERSION }}
      - name: Get libuv submodule commit hash
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo ::set-env name=LIBUV_COMMIT_HASH::$(git ls-tree HEAD addons/godot_xterm/native/thirdparty/libuv -l | cut -d\  -f3)
      - name: Cache libuv
        uses: actions/cache@v2
        id: cache-libuv
        with:
          path: addons/godot_xterm/native/thirdparty/libuv
          key: libuv-cache-${{ matrix.platform }}-${{ matrix.target }}-${{ matrix.bits }}-${{ env.LIBUV_COMMIT_HASH }}-v${{ env.LIBUV_CACHE_VERSION }}
      - name: Cache emscripten
        if: ${{ matrix.platform == 'javascript' }}
        uses: actions/cache@v2
        env:
          cache-name: cache-emscripten
        with:
          path: addons/godot_xterm/native/.emcache
          key: emsdk-cache-${{ matrix.target }}-v${{ env.EMSCRIPTEN_CACHE_VERSION }}

      # Ubuntu-specific steps.
      - name: Install ubuntu build dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y scons gcc-multilib g++-multilib

      # JavaScript-specific steps.
      - name: Install javascript build dependencies
        if: ${{ matrix.platform == 'javascript' }}
        uses: mymindstorm/setup-emsdk@v9
        with:
          version: 2.0.10
          actions-cache-folder: emsdk-cache-${{ matrix.target }}

      # MacOS-specific steps.
      - name: Install additional macos build dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install scons

      # Windows-specific steps.
      - name: Install additional windows build dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        run: python -m pip install scons
      - uses: ilammy/msvc-dev-cmd@v1.9.0
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          arch: win${{ matrix.bits }}

      - name: Build godot-cpp bindings
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd addons/godot_xterm/native/thirdparty/godot-cpp
          scons platform=${{ matrix.platform }} target=${{ matrix.target }} bits=${{ matrix.bits }} generate_bindings=yes -j2

      - name: Setup cmake
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.15.4'
          use-32bit: ${{ matrix.bits == 32 && matrix.os == 'windows-latest' }}
      - name: Build libuv
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        shell: bash
        env:
          TARGET: ${{ matrix.target }}
          BITS: ${{ matrix.bits }}
          OS: ${{ matrix.os }}
        run: |
          cd addons/godot_xterm/native/thirdparty/libuv
          args="-DCMAKE_BUILD_TYPE=$TARGET -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE"
          if [ "$TARGET" == "release" ]; then
            args="$args -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL"
          else
            args="$args -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL"
          fi
          if [ "$BITS" -eq 32 -a "$OS" == "windows-latest" ]; then
            cmake -G "Visual Studio 16 2019" -A Win32 -S $(pwd) -B "build" $args
          else
            mkdir build || true
            cd build
            if [ "$BITS" -eq 32 ]; then args="$args -DCMAKE_SYSTEM_PROCESSOR=i686 -DCMAKE_C_FLAGS=-m32"; fi
            cmake .. $args
            cd ..
          fi
          cmake --build build --config $TARGET

      - name: Build libgodot-xterm
        run: |
          cd addons/godot_xterm/native
          scons platform=${{ matrix.platform }} target=${{ matrix.target }} bits=${{ matrix.bits }} -j2

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: libgodot-xterm-${{ matrix.target }}
          path: |
            addons/godot_xterm/native/bin/*.so
            addons/godot_xterm/native/bin/*.wasm
            addons/godot_xterm/native/bin/*.dylib
            addons/godot_xterm/native/bin/*.dll


  # GDNative HTML5 export templates aren't provided so we must build them
  export_template:
    name: 'Export Template'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ release, debug ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Get godot submodule commit hash
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo ::set-env name=GODOT_COMMIT_HASH::$(git ls-tree HEAD misc/export_templates/godot -l | cut -d\  -f3)
      - name: Cache export template
        uses: actions/cache@v2
        id: cache-export-template
        env:
          cache-name: cache-export-template
        with:
          path: misc/export_templates/godot/bin
          key: godot-${{ env.GODOT_COMMIT_HASH }}-${{ matrix.target }}-v${{ env.EXPORT_TEMPLATE_CACHE_VERSION }}
      - name: Build template in docker container
        if: steps.cache-export-template.outputs.cache-hit != 'true'
        run: cd misc/export_templates && ./build.sh -t ${{ matrix.target }}
      - name: Upload export template
        uses: actions/upload-artifact@v2
        with:
          name: html5-gdnative-export-templates
          path: misc/export_templates/godot/bin/webassembly_gdnative_${{matrix.target}}.zip


  import_and_plugins:
    name: 'Import Files and Install Plugins'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Godot
        uses: lihop/setup-godot@1a5160836c68751f0d1cf5b090dd4d532d21d4d3
      - name: Import files
        run: godot --editor --quit
      - name: Install plugins
        run: godot --no-window -s plug.gd install
      - name: Upload imported files for use by other jobs
        uses: actions/upload-artifact@v2
        with:
          name: import-and-plugins
          retention-days: 1 # Minimum.
          path: |
            .import
            addons
            !addons/godot-xterm
 

  html5_export:
    name: 'HTML5 Export'
    needs: [ build, export_template ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup Godot
      uses: lihop/setup-godot@1a5160836c68751f0d1cf5b090dd4d532d21d4d3
    - name: Install binary build artifacts
      uses: actions/download-artifact@v2
      with:
        name: libgodot-xterm-release
        path: addons/godot_xterm/native/bin
    - name: Install html5 export templates
      uses: actions/download-artifact@v2
      with:
        name: html5-gdnative-export-templates
        path: misc/export_templates/godot/bin
    - name: Install plugins
      run: godot --no-window -s plug.gd install
    - name: Create export directory
      run: mkdir -p docs/demo
    - name: Export html5
      run: godot --export HTML5
    # FIXME: HTML5 Exports not properly exporting .cast files.
    # So skip upload for now.
    #- name: Upload export
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: html5-demo
    #    path: docs/demo


  test:
    name: 'Test'
    # Uses imported files and install plugins from html5_export step.
    # See the proposal to support command line import https://github.com/godotengine/godot-proposals/issues/1362
    needs: [ import_and_plugins, build ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        bits: [ 64, 32 ]
        godot_version: [ '3.2', '3.3.2', '3.4-beta1' ]
        exclude:
          - os: ubuntu-latest
            bits: 32
          - os: macos-latest
            bits: 32
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Godot
        uses: lihop/setup-godot@1a5160836c68751f0d1cf5b090dd4d532d21d4d3
        with:
          version: ${{ matrix.godot_version }}
          bits: ${{ matrix.bits }}
      - name: Install binary build artifacts
        uses: actions/download-artifact@v2
        with:
          name: libgodot-xterm-release
          path: addons/godot_xterm/native/bin
      - name: Install imported files and plugins
        uses: actions/download-artifact@v2
        with:
          name: import-and-plugins
          path: ./
      - name: Run tests
        if: ${{ matrix.godot_version != '3.2' }}
        shell: bash
        run: godot --no-window -s addons/gut/gut_cmdln.gd -gconfig=test/.gutconfig.ci.json
      - name: Run v3.2 tests
        if: ${{ matrix.godot_version == '3.2' }}
        shell: bash
        run: godot --no-window -s addons/gut/gut_cmdln.gd -gconfig=test/.gutconfig.3.2.json
      - name: Run unix tests
        if: ${{ matrix.os != 'windows-latest' }}
        run: godot --no-window -s addons/gut/gut_cmdln.gd -gconfig=test/.gutconfig.unix.json


  # Git archive should only include addons/godot_xterm directory.
  check-archive:
    name: 'Check Archive'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Create git archive
      run: git archive -o archive.zip HEAD
    - name: Extract archive
      run: mkdir -p /tmp/unzipped && unzip archive.zip -d /tmp/unzipped
    - name: Check that archive only contains addons directory
      run: |
        shopt -s nullglob dotglob
        ls -lR /tmp/unzipped
        files=(/tmp/unzipped/*)
        if [ ${#files[@]} -ne 1 ]; then
          echo "Wrong number of files in archive (${#files[@]}) expected 1."
          exit 1
        fi
        if [ ! -d "/tmp/unzipped/addons" ]; then
          echo "Expected directory (addons) not found."
          exit 1
        fi
        files=(/tmp/unzipped/addons)
        if [ ${#files[@]} -ne 1 ]; then
          echo "Wrong number of files in addons directory (${#files[@]}) expected 1."
          exit 1
        fi
        if [ ! -d "/tmp/unzipped/addons/godot_xterm" ]; then
          echo "Expected directory (addons/godot_xterm) not found."
          exit 1
        fi

